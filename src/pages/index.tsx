import { FormEvent, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { GetServerSideProps } from 'next';
import { getSession, useSession, signOut } from 'next-auth/react';

import Card from '@/component/card';
import Loading from '@/component/loading';

import { api } from '@/services/api';

import { FiLogOut } from 'react-icons/fi';
import styles from '@/styles/Home.module.scss';

type Data = {
  text: string;
  created_at: Date;
}

type MoviesEmojizados = {
  movieName: string;
  movieEmojizado: string;
  created_at: Date;
};

type User = {
  user_name: string;
  user_avatar: string;
}

export default function Home() {
  const [ loading, setLoading ] = useState(false);
  const [ isError, setIsError ] = useState(false);
  const [ movieName, setMovieName ] = useState('');
  const [ moviesEmojizados, setMoviesEmojizados ] = useState<MoviesEmojizados[]>([]);
  
  const { data: session } = useSession();

  const user: User = {
    user_name: session?.user?.name?.split(' ')[0]!,
    user_avatar: session?.user?.image!
  }

  const handleSendMessageSubmit = async (event: FormEvent): Promise<void> => {
    event.preventDefault();
    const message = `Convert movie titles into emoji.\n\n${movieName}:`;
    setLoading(true);
    try {
      const response = await api.post<Data>('/ia-emojizador', {
        prompt: message
      });

      if (response.data.text) {
        setMoviesEmojizados(oldState => [{
          movieName,
          movieEmojizado: response.data.text,
          created_at: response.data.created_at,
        }, ...oldState]);
        setLoading(false);
        return;
      }

      setIsError(true);
      setLoading(false);
    } catch (err) {
      setIsError(true);
      setLoading(false);
      console.log(err);
    }
  }

  return (
    <>
      <Head>
        <title>Emojize seu filme preferido</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icon.ico" />
      </Head>
      <main className={styles.main}>
        <header className={styles.header}>
          <Image
            src="./Logo.svg"
            width={168}
            height={32}
            alt="Logo"
          />

          <div className={styles.userInfo}>
            <div>
              <Image
                src={user.user_avatar}
                width={46}
                height={46}
                alt="Logo"
              />
            </div>
            <FiLogOut size={24} onClick={() => signOut()} />
          </div>
        </header>
          <h2 className={styles.title}>
          Olá <span>{user.user_name},</span> <br />
            Digite o nome do seu filme preferido
            e veja a mágica acontecer
          </h2>
        <form className={styles.input} onSubmit={handleSendMessageSubmit}>
          <input
            type="text"
            placeholder='Digite o nome do filme'
            maxLength={40}
            onChange={(event) => setMovieName(event.target.value)}
            value={movieName}
          />
          <button type="submit" id="submit-button">
            {
              loading ? (
                <Loading />
              ) : 'Emojizar'
            }
          </button>
        </form>

        {
          isError && (
            <div className={styles.error}>
              <p>Eita, deu erro! Pode enviar um print no meu instagram? <a href="https://ig.me/m/rodrigo.dev.json" target='_blank'>@rodrigo.dev.json</a></p>
            </div>
          )
        }

        <div className={styles.divider} />
        
        <div className={styles.list}>
          {
            moviesEmojizados.map(movie => (
              <Card movieName={movie.movieName} movieEmoji={movie.movieEmojizado} />
            ))
          }
        </div>
      </main>
    </>
  )
};


export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: '/signin',
        permanent: false,
      }
    }
  }

  return {
    props: {
      session,
    }
  };
}
