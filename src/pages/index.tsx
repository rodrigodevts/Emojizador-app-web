import { FormEvent, useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { GetServerSideProps } from 'next';
import { getSession, useSession, signOut } from 'next-auth/react';
import { Session } from 'next-auth';

import Card from '@/component/card';
import Loading from '@/component/loading';

import { api } from '@/services/api';

import { FiLogOut } from 'react-icons/fi';
import styles from '@/styles/Home.module.scss';

type DataResponseType = {
  movieGenerated?: {
    movieEmojizado: string;
  };
  countMovies?: number;
  message: string;
}

type MoviesEmojizadosType = {
  data: {
    movieName: string;
    movieEmojizado?: string;
  }
};

type UserType = {
  user_name: string;
  user_avatar: string;
}

type CountMovieGeneratedType = {
  countMovies: number;
  maxMovies: number;
}

interface CustomSessionProps extends Session {
  userActive: object | null;
}

export default function Home() {
  const [ loading, setLoading ] = useState(true);
  const [ loadingData, setLoadingData ] = useState(true);
  const [ isError, setIsError ] = useState(false);
  const [ errorMessage, setErrorMessage ] = useState('');
  const [countMovieGenerated, setCountMovieGenerated] = useState<CountMovieGeneratedType>({} as CountMovieGeneratedType);
  const [ movieName, setMovieName ] = useState('');
  const [moviesEmojizados, setMoviesEmojizados] = useState<MoviesEmojizadosType[]>([]);
  
  const { data: session } = useSession();

  const customSession = session as CustomSessionProps | null; 

  const user: UserType = {
    user_name: customSession?.user?.name?.split(' ')[0]!,
    user_avatar: customSession?.user?.image!
  }

  const getErrorMessage = (error: string): string => {
    switch (error) {
      case 'insufficient credits':
        return 'Infelizmente meu orÃ§amento Ã© limitado, vocÃª sÃ³ pode emojizar 3 filmes! ðŸ˜­ðŸ˜­ðŸ˜­ðŸ˜­';
      case 'movie name already exists':
        return 'VocÃª jÃ¡ emojizou esse, que tal tentar outro filme? ðŸ˜‰';
      default:
        return "Eita, deu erro! Pode enviar um print no meu instagram? @rodrigo.dev.json"
    }
  }
  
  const handleSendMessageSubmit = async (event: FormEvent): Promise<void> => {
    event.preventDefault();

    if (!session) {
      return;
    }

    if (customSession?.userActive) {
      const message = `Convert movie titles into emoji.\n\n${movieName}:`;
      setLoading(true);
      try {
        const { data } = await api.post<DataResponseType>('/ia-emojizador', {
          prompt: message,
          movieName,
          user: customSession?.userActive
        });

        if (data.movieGenerated?.movieEmojizado) {
          listMoviesGenerated();
          setLoading(false);
          setIsError(false);
          setErrorMessage('');
          return;
        }

        setIsError(true);
        setLoading(false);
      } catch (err: any) {
        setIsError(true);
        setLoading(false);
        setErrorMessage(getErrorMessage(err.response.data.message));
      }
    }
  }

  const listMoviesGenerated = async () => {
    setLoadingData(true);
    const response = await api.post('/movies-emojis', {
      user: customSession?.userActive
    });
    setCountMovieGenerated({
      countMovies: response.data.countMovies,
      maxMovies: response.data.maxMovies
    });
    setMoviesEmojizados(response.data.movies.data);
    setLoadingData(false);
  }

  useEffect(() => {
    listMoviesGenerated();
  }, []);

  return (
    <>
      <Head>
        <title>Emojize seu filme preferido</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icon.ico" />
      </Head>
      <main className={styles.main}>
        <header className={styles.header}>
          <Image
            src="./Logo.svg"
            width={168}
            height={32}
            alt="Logo"
          />

          <div className={styles.countMoviesContainer}>
            <span>VocÃª jÃ¡ emojizou</span>
            <span className={styles.countMoviesText}>
              {countMovieGenerated.countMovies} de {countMovieGenerated.maxMovies} filmes
            </span>
          </div>

          <div className={styles.userInfo}>
            <div>
              <Image
                src={user.user_avatar}
                alt="Logo"
                fill={true}
              />
            </div>
            <FiLogOut size={24} onClick={() => signOut()} />
          </div>
        </header>
          <h2 className={styles.title}>
          OlÃ¡ <span>{user.user_name},</span> <br />
            Digite o nome do seu filme preferido
            e veja a mÃ¡gica acontecer
          </h2>
        <form className={styles.input} onSubmit={handleSendMessageSubmit}>
          <input
            type="text"
            placeholder='Digite o nome do filme'
            maxLength={40}
            onChange={(event) => setMovieName(event.target.value)}
            value={movieName}
          />
          <button type="submit" id="submit-button">
            {
              loading ? (
                <Loading />
              ) : 'Emojizar'
            }
          </button>
        </form>

        {
          isError && (
            <div className={styles.error}>
              <p>
                {errorMessage}
              </p>
            </div>
          )
        }

        <div className={styles.divider} />

          {
            loadingData ? (
              <div className={styles.loadingData}>
                <Loading />
              </div>
          ) : (
              <div className={styles.list}>
                {
                  moviesEmojizados.map(({ data }) => (
                    <Card key={data.movieName} movieName={data.movieName} movieEmoji={data.movieEmojizado} />
                  ))
                }
              </div>
            )
          }
      </main>
    </>
  )
};


export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: '/signin',
        permanent: false,
      }
    }
  }

  return {
    props: {
      session,
    }
  };
}
