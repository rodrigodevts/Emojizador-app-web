import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { getSession, signIn } from 'next-auth/react';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';

import Loading from '@/component/loading';

import { FaGoogle } from 'react-icons/fa';
import background from '../../../public/background.png';
import styles from '@/styles/Login.module.scss';

export default function Login() {
	const [loading, setLoading] = useState(false);
	const router = useRouter();
	
	const handleSubmit = async () => {
		try {
			setLoading(true);
			await signIn();
			setLoading(false);
			router.push('/');
		} catch (err) {	
			setLoading(false);
			console.log(err);
		}
	}
	return (
		<>
			<Head>
				<title>Emojize seu filme preferido</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/icon.ico" />
			</Head>
			<main className={styles.main}>
				<header className={styles.header}>
					<Image
						src="./Logo.svg"
						width={168}
						height={32}
						alt="Logo"
					/>
				</header>
				<div className={styles.sigIn}>
					<div className={styles.title}>
						<h1>
							Venha se divertir no emojizador.
						</h1>
						<p>Utilize sua conta Google (Gmail) para se conectar</p>
					</div>
					<button
						className={styles.signInButton}
						onClick={handleSubmit}
						disabled={loading}
					>
						{loading ? (
							<Loading />
						) : (
							<>
								<FaGoogle size={18} color="#FFF" />
								Criar conta Google
							</>
						)
					}
					</button>
				</div>
				<Image
					className={styles.background}
					src={background}
					width={960}
					height={241}
					alt="Emojis"
				/>
			</main>
		</>
	)
}


export const getServerSideProps: GetServerSideProps = async (context) => {
	const session = await getSession(context);
	
	if (session) {
		return {
			redirect: {
				destination: '/',
				permanent: false,
			}
		}
	}

	return {
		props: {
			session,
		}
	};
}